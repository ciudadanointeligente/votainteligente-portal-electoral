# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2020-05-02 23:54
from __future__ import unicode_literals

import autoslug.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import picklefield.fields
import taggit.managers
import votai_utils.open_graph


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('popolo', '0002_update_models_from_upstream'),
        ('taggit', '0002_auto_20150616_2121'),
        ('candidator', '0005_auto_20200502_2354'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('area_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='popolo.Area')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('popolo.area', votai_utils.open_graph.OGPMixin),
            managers=[
                ('public', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='popolo.Person')),
                ('extra_info', picklefield.fields.PickledObjectField(default={}, editable=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', unique=True)),
                ('force_has_answer', models.BooleanField(default=False, help_text='Marca esto si quieres que el candidato aparezca como que no ha respondido')),
                ('has_won', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Candidato',
                'verbose_name_plural': 'Candidatos',
            },
            bases=('popolo.person', models.Model, votai_utils.open_graph.OGPMixin),
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_info', picklefield.fields.PickledObjectField(default={}, editable=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from=b'name', unique=True)),
                ('description', models.TextField(blank=True)),
                ('searchable', models.BooleanField(default=True)),
                ('highlighted', models.BooleanField(default=False)),
                ('extra_info_title', models.CharField(blank=True, max_length=50, null=True)),
                ('extra_info_content', models.TextField(blank=True, help_text='Puedes usar Markdown. <br/> <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank">Markdown syntax</a> allowed, but no raw HTML. Examples: **bold**, *italic*, indent 4 spaces for a code block.', max_length=3000, null=True)),
                ('uses_preguntales', models.BooleanField(default=False, help_text='Esta elecci\xf3n debe usar preguntales?')),
                ('uses_ranking', models.BooleanField(default=False, help_text='Esta elecci\xf3n debe usar ranking')),
                ('uses_face_to_face', models.BooleanField(default=True, help_text='Esta elecci\xf3n debe usar frente a frente')),
                ('uses_soul_mate', models.BooleanField(default=True, help_text='Esta elecci\xf3n debe usar 1/2 naranja')),
                ('uses_questionary', models.BooleanField(default=True, help_text='Esta elecci\xf3n debe usar cuestionario')),
                ('candidates_can_commit_everywhere', models.BooleanField(default=True, help_text='Los candidatos en esta elecci\xf3n pueden comprometerse en todas las elecciones')),
                ('position', models.CharField(blank=True, default=b'', help_text='A qu\xe9 cargo est\xe1 postulando?', max_length=255, null=True)),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elections', to='elections.Area')),
                ('second_round', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='elections.Election')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Mi Elecci\xf3n',
                'verbose_name_plural': 'Mis Elecciones',
            },
            bases=(models.Model, votai_utils.open_graph.OGPMixin),
        ),
        migrations.CreateModel(
            name='PersonalData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=512)),
                ('value', models.CharField(max_length=4096)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personal_datas', to='elections.Candidate')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionCategory',
            fields=[
                ('category_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='candidator.Category')),
                ('election', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='elections.Election')),
            ],
            options={
                'verbose_name': 'Categor\xeda de pregunta',
                'verbose_name_plural': 'Categor\xedas de pregunta',
            },
            bases=('candidator.category',),
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
            ],
            options={
                'verbose_name': 'Position',
                'proxy': True,
                'verbose_name_plural': 'Positions',
                'indexes': [],
            },
            bases=('candidator.position',),
        ),
        migrations.CreateModel(
            name='TakenPosition',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('candidator.takenposition',),
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
            ],
            options={
                'verbose_name': 'Pregunta',
                'proxy': True,
                'verbose_name_plural': 'Preguntas',
                'indexes': [],
            },
            bases=('candidator.topic',),
        ),
        migrations.AddField(
            model_name='candidate',
            name='elections',
            field=models.ManyToManyField(default=None, related_name='candidates', to='elections.Election'),
        ),
    ]
